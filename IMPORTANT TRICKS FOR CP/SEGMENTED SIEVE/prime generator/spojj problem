https://www.spoj.com/problems/PRIME1    ----PROBLEM LINK


segmented sieve approach to do this problem ----


#include<bits/stdc++.h>
using namespace std;
#define ll long long int
bool arr[50009];
vector<ll>primes;
void precompute_seive()
{
    for(int i=3;i<=224;i+=2)
    {
        if(!arr[i])
        {
            for(int j=i*i;j<=50000;j+=i)
            {
                if(!arr[j])
                {
                    arr[j]=1;
                }
            }
        }
    }
    primes.push_back(2);
    for(int i=3;i<=50000;i++)
    {
        if(arr[i]==0 and (i&1))
        {
            primes.push_back(i);
        }
    }
    arr[1]=1;
    arr[0]=1;
}

bool segment[10000009];
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    precompute_seive();
    ll t;
    cin>>t;
    while(t--)
    {
        ll m,n;
        cin>>m>>n;
        if(n<=50000)
        {
           
           if(m<=2)
           cout<<2<<endl;

           for(int i=m;i<=n;i++)
           {
               if(arr[i]==0 and (i&1))
               {
                   cout<<i<<endl;
               }
           }
           cout<<endl;
           continue;
        }
        
        for(int i=0;primes[i]*primes[i]<=n;i++)
        {
            ll lower=m/primes[i];
            lower*=primes[i];
            for(int j=lower;j<=n;i+=primes[i])
            {
                if(lower<m)
                continue;
                segment[j-m]=1;
            }
        }
        
        for(int i=0;primes[i]*primes[i]<=n;i++)
        {
            if(primes[i]>=m and primes[i]<=n)
            cout<<primes[i]<<endl;
        }
        
        for(int i= m==1?1:0;i<(n-m+1);i++)
        {
            if(segment[i]==0 )
            cout<<(i+m)<<endl;
        }
        cout<<endl;
    }
}
