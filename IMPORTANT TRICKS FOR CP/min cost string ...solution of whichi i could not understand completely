https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/Y    -----Problem LINK





solution ---- i asked some one to give me a solution to this problem and i understood the solution 

/*this is not my solution it is  (https://codeforces.com/profile/tushargupta9800)----it's his) 

#include<bits/stdc++.h>
using namespace std;

#define in long long int
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)

#define loop(i, b) for(int i=0;i<b;i++)
#define dloop(i, a, b) for(int i=a;i<=b;i++)
#define rloop(i,n) for(in i=n-1;i>=0;i--)
#define drloop(i, a, n) for(in i=n;i>=a;i--)
#define pb(a) push_back(a)
#define trav(a,b) for(auto &a: b)
#define rtrav(a,b) for (auto a = b.rbegin(); a != b.rend(); a++) //use*a
#define mod 1000000007
#define mod2 998244353
#define ff first
#define ss second
#define elif else if
#define lcm(a, b) (((a) * (b)) / (__gcd((a), (b))))
#define gcd(a, b) (__gcd((a), (b)))
#define input(x) in x; cin>>x
#define input_A(x,y) in x[y]; loop(i,y) cin>>x[i]
#define MAX 1000005

typedef unsigned long long ull;
typedef long double lld;

#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl
#else
#define debug(x)
#endif

void _print(in t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

void preSolve(){
   
}

char to_char(in i){
    return 'a' + i;
}

in to_int(char c){
    return c - 'a';
}

void Solve(){

    string s;
    cin>>s;

    in n = s.size();

    map<in, vector<char>> d;
    in arr[26];
    in minx = INT_MAX;

    loop(i, 26){
        cin>>arr[i];
        if(arr[i] < minx) minx = arr[i];
        d[arr[i]].pb(to_char(i));
    }

    vector<char> ans;

    in ind = 0;
    while(ind < n){
        if(s[ind] == '?'){
            in ind2 = ind;
            while(s[ind2] == '?' && ind2 < n) ind2++;
            if(ind == 0 && ind2 == n){
                loop(i, n) s[i] = 'a';
            }
            elif(ind == 0){
                in score = arr[to_int(s[ind2])];
                loop(i, ind2) s[i] = d[score][0];
            }
            elif(ind2 == n){
                in score = arr[to_int(s[ind-1])];
                dloop(i, ind, n-1) s[i] = d[score][0];
            }
            else{
                in score1 = arr[to_int(s[ind-1])];
                in score2 = arr[to_int(s[ind2])];
                char a = d[score1][0];
                char b = d[score2][0];
                char c = 'z' + 1;
                loop(i, 26){
                    if(arr[i] >= min(score1, score2) && arr[i] <= max(score1, score2)){
                        c = min(c, d[arr[i]][0]);
                    }
                }
                dloop(i, ind, ind2-1) s[i] = min({a, b, c});
            }
        }
        else ans.pb(s[ind]);
        ind++;
    }

    in sum = 0;
    dloop(i, 1, n-1){
        sum += abs(arr[to_int(s[i])] - arr[to_int(s[i-1])]);
    }

    cout<<sum<<endl;

    loop(i, n) cout<<s[i];
    cout<<endl;

}

int main(){
    #ifndef ONLINE_JUDGE
        freopen("Error.txt", "w", stderr);
    #endif
    preSolve();
    fast;
    // int t;
    // cin>>t;
    // while(t--) 
        Solve();
    return 0;
}
